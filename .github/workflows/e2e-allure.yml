name: CI - E2E Allure

permissions:
  contents: read
  actions: read

defaults:
  run:
    shell: bash

# Global config (change as you need to switch between tags)
env:
  CUCUMBER_PROFILE: allure_pretty    # change per profile
  CUCUMBER_TAGS: "@regression"       # set tags
  RETENTION_DAYS: 60                 # Set how long to retain reports and trends
  PUBLISH_BRANCHES: '["main","ES-650-CI-intergration"]'

on:
  pull_request: {}
  push:
    branches: [ main, ES-650-CI-intergration ]
  workflow_dispatch: {}
  schedule:
    - cron: '0 2 * * *'              # Set your time here

concurrency:
  group: e2e-allure-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  init:
    name: Init
    runs-on: ubuntu-latest
    outputs:
      publish_branches: ${{ steps.expose.outputs.publish_branches }}
    steps:
      - id: expose
        run: |
          # Pass the JSON string through safely (quotes preserved)
          printf 'publish_branches=%s\n' '${{ env.PUBLISH_BRANCHES }}' >> "$GITHUB_OUTPUT"
  e2e:
    name: E2E (Allure) v5
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      TEST_ENV: ci
    outputs:
      has_report: ${{ steps.check_report.outputs.exists }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Marker
        run: |
          echo "CI-E2E-Allure :: $(date -u)"
          echo "Branch: $GITHUB_REF_NAME"
          echo "SHA:    $GITHUB_SHA"
          echo "Actor:  $GITHUB_ACTOR"
          echo "Tags:   $CUCUMBER_TAGS"
          echo "Profile:$CUCUMBER_PROFILE"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Set up Node (needed for Allure CLI)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up Java (needed by Allure CLI)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Allure CLI
        run: npm install -g allure-commandline

      - name: Install browser libs (Noble-safe)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            fonts-liberation \
            libgtk-3-0 \
            libnss3 \
            libgbm1 \
            libxkbcommon0 \
            libatk-bridge2.0-0
          # 24.04 uses libasound2t64; 22.04 uses libasound2
          sudo apt-get install -y libasound2t64 || sudo apt-get install -y libasound2

      # ---- Browser: Chrome (may add FF/Edge later if needed) ----
      - name: Set up Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Show versions
        run: |
          ruby -v
          bundle -v
          node -v
          java -version
          google-chrome --version || true

      - name: Prepare folders (leave config/ alone)
        run: mkdir -p reports screenshots

      - name: Write Allure executor.json (dynamic build info)
        run: |
          mkdir -p reports/allure-results
          cat > reports/allure-results/executor.json <<EOF
          {
            "name": "GitHub Actions",
            "type": "github",
            "buildName": "CI - E2E Allure #${GITHUB_RUN_NUMBER}",
            "buildUrl": "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}",
            "reportName": "Allure Report",
            "buildOrder": ${GITHUB_RUN_NUMBER}
          }
          EOF

      - name: Write Allure environment.properties (helpful in report)
        run: |
          {
            echo "profile=$CUCUMBER_PROFILE";
            echo "tags=$CUCUMBER_TAGS";
            echo "test_env=$TEST_ENV";
            echo "branch=${GITHUB_REF_NAME}";
            echo "sha=${GITHUB_SHA}";
          } > reports/allure-results/environment.properties

      - name: Generate config/.secrets.yml
        env:
          STAGING_FABS_HOMEPAGE_URL: ${{ secrets.STAGING_FABS_HOMEPAGE_URL }}
        run: |
          cat > config/.secrets.yml <<YAML
          ci:
            staging_fabs_homepage_url: "${STAGING_FABS_HOMEPAGE_URL}"
          YAML

      - name: Verify required secrets
        run: |
          if [ -z "${{ secrets.STAGING_FABS_HOMEPAGE_URL }}" ]; then
            echo "Missing required secret: STAGING_FABS_HOMEPAGE_URL"
            exit 1
          fi

      - name: Bundle install
        run: bundle install --without development

      # ---- Running of the tests  ----
      - name: Run Cucumber with Allure (profile chooses browser)
        env:
          STAGING_FABS_HOMEPAGE_URL: ${{ secrets.STAGING_FABS_HOMEPAGE_URL }}
        run: |
          TEST_ENV=ci bundle exec cucumber -p "$CUCUMBER_PROFILE" --tags "$CUCUMBER_TAGS" || true

      # ---- Restore history before generating report ----
      - name: Download previous Allure history (same branch)
        uses: dawidd6/action-download-artifact@v6
        with:
          name: allure-history
          path: history
          branch: ${{ github.ref_name }}
          workflow_conclusion: completed
          workflow: .github/workflows/e2e-allure.yml
          if_no_artifact_found: ignore
        continue-on-error: true

      - name: Load Allure results with previous history (if any)
        run: |
          if [ -d history ]; then
            mkdir -p reports/allure-results/history
            cp -R history/* reports/allure-results/history/ || true
            ls -la reports/allure-results/history || true
          else
            echo "No previous history found; using this run as baseline."
          fi

      - name: Patch seed history for trend / append history data
        run: |
          set -euo pipefail
          f="reports/allure-results/history/history-trend.json"
          if [ -f "$f" ]; then
            tmp="$(mktemp)"
            jq --arg rn "Allure Report" --argjson bo ${GITHUB_RUN_NUMBER:-1} \
               'map(.reportName = ($rn) | .buildOrder = (.buildOrder // ($bo-1)))' \
               "$f" > "$tmp" && mv "$tmp" "$f"
            echo "Patched $f to include reportName/buildOrder"
          else
            echo "No history-trend.json to patch"
          fi

      # ---- Generate Allure Report ----
      - name: Generate Allure report
        run: |
          allure generate reports/allure-results --clean -o reports/allure-report

      # ---- Robust gate: set job output if report exists ----
      - name: Check report exists (set job output)
        id: check_report
        run: |
          if [ -d reports/allure-report ] && [ "$(ls -A reports/allure-report | wc -l)" -gt 0 ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      # ---- Upload artifacts ----
      - name: Upload Allure history for next run
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: reports/allure-report/history
          if-no-files-found: warn
          retention-days: ${{ env.RETENTION_DAYS }}

      - name: Upload raw Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: reports/allure-results
          if-no-files-found: warn
          retention-days: ${{ env.RETENTION_DAYS }}

      - name: Upload Allure HTML report
        if: always() && steps.check_report.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: reports/allure-report
          if-no-files-found: error
          retention-days: ${{ env.RETENTION_DAYS }}

      - name: Summary
        if: always()
        run: |
          echo "### Allure E2E summary" >> $GITHUB_STEP_SUMMARY
          echo " - Profile: \`allure_pretty\`" >> $GITHUB_STEP_SUMMARY
          echo " - Tags: \`$CUCUMBER_TAGS\`" >> $GITHUB_STEP_SUMMARY
          echo " - TEST_ENV: \`${TEST_ENV}\`" >> $GITHUB_STEP_SUMMARY
          echo " - Artifacts: **allure-report** (HTML), **allure-results** (raw)" >> $GITHUB_STEP_SUMMARY


  publish:
    needs: [init, e2e]
    if: ${{ needs.e2e.outputs.has_report == 'true' &&
      contains(fromJson(needs.init.outputs.publish_branches), github.ref_name) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read          # Allows us to check out existing gh-pages to preserve older runs
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Download Allure HTML artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: ./_site

        # Bring in last published site so older runs remain visible
      - name: Download previous site bundle
        uses: dawidd6/action-download-artifact@v3
        with:
          name: site-bundle
          path: _prev
          workflow: .github/workflows/e2e-allure.yml
          workflow_conclusion: completed
          if_no_artifact_found: ignore


        # Stage per-run report and a branch "latest" redirect, preserving old runs
      - name: Stage per-run report and latest redirect
        run: |
          set -euo pipefail
          BRANCH="${{ github.ref_name }}"
          RUN="${{ github.run_number }}"
  
          # start with what's already live
          mkdir -p publish
          if [ -d _prev ]; then cp -a _prev/. publish/; fi
          
          # prevent Jekyll processing
          touch publish/.nojekyll
          
          # copy this run
          mkdir -p "publish/runs/$BRANCH/$RUN" "publish/runs/$BRANCH/latest"
          cp -a _site/. "publish/runs/$BRANCH/$RUN/"
  
          # redirect runs/<branch>/latest -> runs/<branch>/<run>/
          cat > "publish/runs/$BRANCH/latest/index.html" <<EOF
          <!doctype html>
          <meta charset="utf-8">
          <meta http-equiv="refresh" content="0; url=../$RUN/">
          <title>Redirecting to latest runâ€¦</title>
          <h1>Redirecting to latest runâ€¦</h1>
          <p>If you're not redirected, <a href="../$RUN/">open run $RUN</a>.</p>
          EOF

      # Simple home page listing branches â†’ latest (keeps it browsable)
      - name: Build home index.html (branches â†’ latest)
        run: |
          set -euo pipefail
          mkdir -p publish/runs
          cat > publish/index.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>E2E Allure Reports</title>
          <h1>E2E Allure Reports</h1>
          <p>Select a branch to view its latest report:</p>
          <ul>
          HTML
          if [ -d publish/runs ]; then
            for b in $(ls -1 publish/runs); do
              echo "  <li><a href=\"runs/$b/latest/\">$b â€” latest</a></li>" >> publish/index.html
            done
          fi
          echo "</ul>" >> publish/index.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./publish

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4

      - name: Archive site for next publish
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: site-bundle
          path: ./publish
          retention-days: ${{ env.RETENTION_DAYS }}

      - name: Publish summary with link
        run: |
          echo "### Allure report published" >> $GITHUB_STEP_SUMMARY
          echo "- Latest for \`${{ github.ref_name }}\`: ${{ steps.deploy.outputs.page_url }}runs/${{ github.ref_name }}/latest/" >> $GITHUB_STEP_SUMMARY
          echo "- This run: ${{ steps.deploy.outputs.page_url }}runs/${{ github.ref_name }}/${{ github.run_number }}/" >> $GITHUB_STEP_SUMMARY

